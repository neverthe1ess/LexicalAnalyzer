/* 1-2 string 토큰 처리
   복잡한 경우도 처리 가능하게 했습니다.
	ex) ab“a  b”ab
   1. 첫 번째 “ 인식 시 Sting 진입 -> 1-3 진입 불가
   2. 두 번째 “ 인식 시 String 해제 -> 1-3 진입 가능
*/

if (TokenState1 == false & TokenState2 == false) {
	if (A[i] == “) {
		StringStart = true; // 첫 번째 " 구분을 위한 변수
		TokenState1 = true;
	}
}

If (TokenState1 == ture & StringStart == false)
	if(A[i] == ‘ “ ‘)
		TokenState1 = false;
	else if(A[ i+1 ] == ‘ \0 ‘)
		TokenState1 = false;
			//  \0에 의한 토큰 분류만 허용
			// 1-3진입

if (StringStart == true)
	StringStart == false;

/* 1-3
if(TokenState1 == false & TokenState2 == false)
	// 입력 값 분석
	// 구분자에의한 토큰 분류 및 다음 입력값으로의 이동
*/


/* 1-1 주석 토큰 처리
   1. /* 인식 시 주석단계 진입 -> 1-3 진입 불가
   2. */ 인식 시 주석단계 해제 -> 1-3 진입 가능
*/

if (TokenState1 == false & TokenState2 == false)
	if(A[i] == ‘ / ‘ & A[ i+1 ] == ‘ * ‘)
		TokenState2 = true;

if (TokenState2 == true)
	if(A[i] == * & A[i+1] == ‘ / ‘)
		TokenState2 == false;
		// 고려사항 abc/* 20 */abc에 대하여
		// 토큰 분리를 abcabc, /* 20 */로 하는 처리의 여부
/* 추가 필요 부분
	/*로 시작해서 끝까지 종료가 되지않을 경우의 처리
	ex)
	  입력 값이 끝났음을 인식하는 조건문 추가
	  입력 값이 끝났으면 TokenState2 == false;
	  1-3에서 토큰 종료 처리
*/

/* 1-3
if(TokenState1 == false & TokenState2 == false)
	// 입력 값 분석
	// 구분자에의한 토큰 분류 및 다음 입력값으로의 이동
*/


2-3
/* 주석 특성상 ‘ /* ’는 존재 하나  ’ */ ‘가 없을 시
    CO3 혹은 CO4상태로 끝나게 된다.
    따라서 output의 기록에서 CO3, CO4의 상태 값에서 Unknown 처리가 필요하다.
*/
            case DIV_OP3:
                if(charClass == MUL_SIGN){
                    state = CO3;
                } else {
                    state = REJECT;
                }
                break;
            case CO3:
                if(charClass == MUL_SIGN){
                    state = CO4;
                } else {
                    state = CO3;
                } // 오토마타 체크 요망
                break;
            case CO4:
                if(charClass == DIV_SIGN){
                    state = CONST_C05;
                } else {
                    state = CO3;	// CO4 -> CO3
                }
                break;
            case CONST_C05:
                state = REJECT;
                break;


2-4
/*
else if(*ch == ‘“’)
	return ‘Str_sign’
*/

	    case START:
		else if (charClass == Str_sign) {
			state = Str1;
		}

            case Str1:
                if(charClass == Str_sign) {
                    state = Str2;
                } else if(*(ch+1) != /0) {
                    state = Str1;
                } else {
                    state = REJECT;
                }
                break;

            case Str2:
                state = REJECT;
                break;


